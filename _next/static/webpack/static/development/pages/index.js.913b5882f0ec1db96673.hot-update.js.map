{"version":3,"file":"static/webpack/static/development/pages/index.js.913b5882f0ec1db96673.hot-update.js","sources":["webpack:///./components/DraggableList.js"],"sourcesContent":["import { animated, useSprings, useSpring } from 'react-spring';\nimport { useDrag } from 'react-use-gesture'\nimport { useEffect, useState, useRef, useCallback } from 'react';\nimport { clamp } from 'lodash';\nimport move from 'lodash-move';\n\nlet draggableListStyle = <style jsx=\"true\">{`\n  .background-wrapper {\n    display: flex;\n    flex-direction: row;\n    position: absolute;\n    align-items: center;\n    height: 80vh;\n  }\n\n  .draggable-list {\n    height: 80vh;\n    position: absolute;\n    top: 0;\n  }\n\n  .background {\n    position: absolute;\n    padding: 5px;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .content {\n    padding: 5px;\n    width: 500px;\n    height: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n  }\n  \n  .pane {\n    position: absolute;\n    width: 40px;\n    height: 40px;\n    overflow: visible;\n    pointer-events: auto;\n    border-radius: 5px;\n    color: white;\n    font-size: 30px;\n    background: lightblue;\n    text-transform: uppercase;\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n    display: flex;\n    font-weight: bold;\n  }  \n  \n  .pane {\n    background: gold;\n    color: black;\n  }\n\n  .consonant {\n    background: grey;\n    color: white;\n  }\n\n`}</style>;\n\n// Returns fitting styles for dragged/idle items\n\nconst BLOCK_SIZE = 40;\nconst PADDING = 3;\nconst BLOCK_SIZE_WITH_PADDING = BLOCK_SIZE + PADDING;\n\nfunction Background(props) {\n  return <animated.div className=\"background\" {...props}>\n    <div className=\"background-letter\"><div>A</div></div>\n    <div className=\"background-letter\"><div>E</div></div>\n    <div className=\"background-letter\"><div>_</div></div>\n    <div className=\"background-letter\"><div>I</div></div>\n    <div className=\"background-letter\"><div>O</div></div>\n    <div className=\"background-letter\"><div>U</div></div>\n    <style jsx >{`\n      .background-letter {\n        height: 40px;\n        width: 40px;\n        border: black 3px solid;\n        display: flex;\n        border-radius: 5px;\n        text-align: center;\n        justify-content: center;\n        align-items: center;\n        margin-bottom: 10px;\n        top: 35px;\n        font-size: 30px;\n        position: relative;\n        font-weight: bold;\n      }\n    `}</style>\n  </animated.div>\n}\n\nconst fn = (order, down, originalIndex, curIndex, x, y) => {\n  return index => {\n    let xMultiplier = order.indexOf(index);\n    if (xMultiplier === -1) { xMultiplier = -100; }\n    return (down && index === originalIndex)\n    ? { y: y, x: curIndex * BLOCK_SIZE_WITH_PADDING + x, opacity: 1, scale: 1.1, zIndex: '3', boxShadow: '0px 20px 20px 0px rgba(0,0,0,0.4)', immediate: n => n === 'x' || n === 'zIndex' }\n    : { y: 0, x: xMultiplier * BLOCK_SIZE_WITH_PADDING, opacity: 1, scale: 1, zIndex: '2', boxShadow: '0px 0px 0px 0px rgba(0,0,0,0.4)', immediate: false };\n  }\n}\n\nconst resetFn = (order, down, originalIndex, curIndex, x, y) => {\n  return index => ({ y: 0, x: -5000, scale: 1, opacity: 0, zIndex: '2', shadow: 1, immediate: false });\n}\n\nconst backgroundFn = (order, down, originalIndex, curIndex, x, y) => {\n  return index => {\n    let xMultiplier = order.indexOf(index);\n    if (xMultiplier === -1) { xMultiplier = -100; }\n    return (down && index === originalIndex)\n    ? { y: 0, x: curIndex * BLOCK_SIZE_WITH_PADDING + x, scale: 1, zIndex: '1', shadow: 15, opacity: 0.5, immediate: n => n === 'x' || n === 'zIndex' }\n    : { y: 0, x: xMultiplier * BLOCK_SIZE_WITH_PADDING, scale: 1, zIndex: '1', shadow: 1, opacity:0, immediate: false };\n  }\n}\n\nconst POOL_SIZE = 10;\n\nfunction DraggableList(props) {\n  let items = props.items;\n  let { order=[], setOrder, answer, onCorrect, answers } = props;\n  const [springs, setSprings] = useSprings(POOL_SIZE, fn(order.map(o => o.origIdx))) // Create springs, each corresponds to an item, controlling its transform, scale, etc.\n  const [backgroundSprings, setBackgroundSprings] = useSprings(POOL_SIZE, fn(order.map(o => o.origIdx))) // Create springs, each corresponds to an item, controlling its transform, scale, etc.\n\n  useEffect(() => {\n    let newOrder = order;\n    setSprings(resetFn(newOrder.map(o => o.origIdx)));\n\n    setTimeout(() => {\n      setSprings(fn(newOrder.map(o => o.origIdx)));\n      setBackgroundSprings(backgroundFn(newOrder.map(o => o.origIdx)));\n    }, 500);\n  }, [props.items]);\n\n  useEffect(() => {\n    if (props.showAnswer) {\n      let newOrder = order;\n      setSprings(fn(newOrder.map(o => o.origIdx)));\n      setBackgroundSprings(backgroundFn(newOrder.map(o => o.origIdx)));\n      checkCorrect(newOrder);\n    }\n  }, [order]);\n\n\n  const [ backgroundInfo, setBackgroundInfo ] = useState({ on: false, idx: 0 });\n  let setLetter = (orderIdx, letter) => {\n    let result = [...order];\n    result[orderIdx].letter = letter;\n    setOrder(result);\n  };\n\n  const setLetterIfMoved = (curIndex, y) => {\n    if (y > -3*BLOCK_SIZE && y <=  -2*BLOCK_SIZE) {\n      setLetter(curIndex, 'A');\n    } else if (y > -2*BLOCK_SIZE && y < -1*BLOCK_SIZE) {\n      setLetter(curIndex, 'E');\n    } else if (y >= 1*BLOCK_SIZE && y <= 2*BLOCK_SIZE) {\n      setLetter(curIndex, 'I');\n    } else if (y > 2*BLOCK_SIZE && y <= 3*BLOCK_SIZE) {\n      setLetter(curIndex, 'O');\n    } else if (y > 3*BLOCK_SIZE && y <= 4*BLOCK_SIZE) {\n      setLetter(curIndex, 'U');\n    }\n  }\n\n  const checkCorrect = (newOrder) => {\n    let current = newOrder.map(o => o.letter).join('');\n    if (answers.includes(current.toUpperCase())) {\n      if (props.showAnswer) {\n        props.setBackgroundColor('CHEAT');\n      } else {\n        props.setBackgroundColor('ANSWERED');\n        props.hideGiveupButton();\n      }\n      setTimeout(() => {\n        setSprings(resetFn(newOrder.map(o => o.origIdx)));\n      }, 2000);\n\n      setTimeout(() => {\n        onCorrect();\n      }, 3000);\n    }\n  };\n  \n  const bind = useDrag(({ args: [originalIndex], down, movement: [x, y] }) => {\n    const curIndex = order.findIndex(o => o.origIdx === originalIndex);\n    const curCol = clamp(Math.round((curIndex * BLOCK_SIZE + x) / BLOCK_SIZE), 0, items.length - 1);\n    const newOrder = move(order, curIndex, curCol);\n\n    const letter = order[curIndex].letter;\n    if (!'AEIOU_'.includes(letter)) { return ; }\n    setBackgroundInfo({ on: true, idx: curCol});\n    setLetterIfMoved(curIndex, y);\n    setSprings(fn(newOrder.map(o => o.origIdx), down, originalIndex, curIndex, x, y)) // Feed springs new style data, they'll animate the view without causing a single render\n    setBackgroundSprings(backgroundFn(newOrder.map(o => o.origIdx), down, originalIndex, curIndex, x, y)) // Feed springs new style data, they'll animate the view without causing a single render\n\n    if (!down) {\n      setOrder(newOrder);\n      setBackgroundInfo({ on: false, idx: curCol });\n      checkCorrect(newOrder);\n    } \n  });\n\n  return (\n    <div className=\"draggable-list\" style={{ display: props.loading ? null : null }}>\n      <div className=\"background-wrapper\" style={{ width: BLOCK_SIZE_WITH_PADDING * items.length }}>\n        { backgroundSprings.map(({ zIndex, shadow, x, y, scale, opacity=0}, i) => {\n          if (i >= items.length) { return <animated.div key={i} style={{display:'none', opacity: 0}}>nothing</animated.div>; }\n          return (<Background key={i} style={{ zIndex, x, opacity, y, scale }} />);\n        }) }\n      </div>\n      <div className=\"content\" style={{ width: BLOCK_SIZE_WITH_PADDING * items.length }}>\n        {springs.map(({ zIndex, boxShadow, x, y, scale, opacity }, i) => {\n          // if (i >= items.length) { return <div key={i} style={{display:'none'}}>nothing</div>; }\n\n          let curBlock = order.find(o => o.origIdx === i) || { letter: '_'};\n          let curLetter = curBlock.letter;\n\n          let classNames = [\"pane\"];\n          if (!'AEIOU_'.includes(curLetter)) { classNames.push('consonant'); }\n          return (\n            <animated.div className={classNames.join(' ')}\n              {...bind(i)}\n              key={i}\n              style={{ zIndex, opacity,\n                boxShadow: boxShadow,\n                x, y, scale }}>\n              <div>{curLetter} </div>\n            </animated.div>\n          )\n        } )}\n      </div>\n      {draggableListStyle}\n    </div>\n  )\n}\n\nexport default DraggableList;"],"mappings":"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","sourceRoot":""}