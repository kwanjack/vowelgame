{"version":3,"file":"static/webpack/static/development/pages/index.js.9d4af12cf5d9b55ce4b0.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react'\nimport Head from 'next/head'\n\nimport { animated, useTransition, useSpring } from 'react-spring';\nimport { useState, useEffect, useCallback } from 'react';\nimport {sample} from 'lodash';\nimport _ from 'lodash';\nimport DraggableList from '../components/DraggableList';\nimport popularWords from '../popular.json';\n\nconst globalStyle = <style jsx global>{`\n* {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n}\n\n* {\n  box-sizing: border-box;\n  user-select: none;\n}\n\nhtml,\nbody,\n.__next,\n.app {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir,\n    helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif;\n  cursor: url('https://uploads.codesandbox.io/uploads/user/b3e56831-8b98-4fee-b941-0e27f39883ab/Ad1_-cursor.png')\n      39 39,\n    auto;\n}\n\n.app {\n  display: flex;\n  background: #ecede7;\n  height: 100vh;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.bottom-buttons {\n  position: absolute;\n  bottom: 0;\n  display: flex;\n  width: 100vw;\n  height: 20vh;\n  z-index: 4;\n  justify-content: space-evenly;\n  font-size: 20vh;\n  align-items: center;\n}\n.skip-button { \n  border: 5px black solid;\n  font-weight: bold;\n  width: 40%;\n  height: 70%;\n  font-size: 20%;\n\n}\n.answer-button {  \n  border: 5px black solid;\n  font-weight: bold;\n  width: 40%;\n  height: 70%;\n  font-size: 20%;\n  background: lightcoral;\n}\n\n.answer-button:active {\n  background: coral;\n}\n\n`}</style>;\n\nconst STARTING = [];\n\nfunction moveUnderscoresToFront(arr) {\n  let result = [];\n  for (let c of arr) {\n    if (!'AEIOU_'.includes(c)) { result.push(c); }\n  }\n  let consonantCount = result.length;\n  for (let i = 0; i < arr.length - consonantCount; i++) { result.unshift('_'); }\n  return result;\n}\n\nconst Home = () => {\n  let [ lettersData, setLettersData ] = useState({\n    letters: STARTING,\n    order: STARTING.map((item, i) => ({ letter: item, origIdx: i })),\n    answer: '',\n    answers: [],\n    allWords: [],\n    showAnswer: false,\n    showGiveupButton: false,\n    loading: true,\n  });\n\n  let setOrder = (newOrder) => setLettersData({\n    ...lettersData,\n    order: newOrder\n  });\n\n  let getSameFormWords = (originalWord, allWords) => {\n    let wordLength = originalWord.length;\n    let wordConsonants = originalWord.split('')\n                         .map(c => c.toUpperCase())\n                         .filter(c => !'AEIOU'.includes(c));\n    \n    return allWords.filter(word => {\n      let length = word.length;\n      let consonants = word.split('')\n                         .map(c => c.toUpperCase())\n                         .filter(c => !'AEIOU'.includes(c));\n      return length === wordLength && _.isEqual(consonants, wordConsonants);\n    });\n  };\n\n  let setNewWord = (word) => {\n    let items = word.split('')\n                    .map(c => c.toUpperCase())\n                    .map(c => 'AEIOU'.includes(c) ? '_' : c );\n         \n    items = moveUnderscoresToFront(items);\n    setLettersData({\n      ...lettersData,\n      letters: items,\n      order: items.map((item, i) => ({ letter: item, origIdx: i })),\n      answer: word,\n      answers: getSameFormWords(word, lettersData.allWords),\n      showAnswer: false,\n    });\n\n    setTimeout(() => {\n      setLettersData(lettersData => ({\n        ...lettersData,\n        showGiveupButton: true,\n      }));\n    }, 1500);\n  };\n\n  const getAnswerOrder = (order, answer) => {\n    let result = [];\n    let clonedOrder = order.slice();\n\n    // if (order.map(o => o.letter).join('') === answer) { return order; }\n    \n    for (let c of answer.split('')) {\n      let foundEntry = clonedOrder.find(o => o.letter === c)\n        || (clonedOrder.find(o => o.letter === '_') || clonedOrder.find(o => 'AEIOU'.includes(o.letter)));\n      foundEntry.letter = c;\n      result.push(foundEntry);\n      clonedOrder = clonedOrder.filter(o => o.origIdx !== foundEntry.origIdx);\n    }\n\n    return result;\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const data = popularWords;\n      let words = data.filter(w => w.length >= 5 && w.length <= 7).map(w => w.toUpperCase());\n\n      let word = sample(words);\n\n      let items = word.split('')\n        .map(c => c.toUpperCase())\n        .map(c => 'AEIOU'.includes(c) ? '_' : c );\n\n      items = moveUnderscoresToFront(items);\n\n      setTimeout(() => {\n        setLettersData({\n          ...lettersData,\n          allWords: words,\n          letters: items,\n          order: items.map((item, i) => ({ letter: item, origIdx: i })),\n          answer: word,\n          answers: getSameFormWords(word, words),\n          loading: false,\n          showGiveupButton: false,\n        });\n      }, 500);\n\n      setTimeout(() => {\n        setLettersData(lettersData => ({\n          ...lettersData,\n          showGiveupButton: true,\n        }));\n      }, 1500);\n    }\n    fetchData();\n  }, []);\n\n  let onCorrect = () => {\n    setNewWord(sample(lettersData.allWords));\n    setBackgroundColor('STANDBY');\n  };\n\n  const coloredBackgroundStyle = {\n    height: '100vh',\n    width: '100vw',\n    position: 'absolute',\n  };\n  const pages = [\n    ({ style }) => <animated.div style={{ ...style, background: 'lightcoral', ...coloredBackgroundStyle }}></animated.div>,\n    ({ style }) => <animated.div style={{ ...style, background: 'mediumturquoise', ...coloredBackgroundStyle }}></animated.div>,\n    ({ style }) => <animated.div style={{ ...style, background: 'springgreen', ...coloredBackgroundStyle }}></animated.div>,\n  ];\n\n  const [index, set] = useState(1)\n\n  const transitions = useTransition(index, p => p, {\n    from: { opacity: 0, },\n    enter: { opacity: 1, },\n    leave: { opacity: 0, },\n  });\n\n  const setBackgroundColor = (state) => {\n    if (state === 'STANDBY') { return set(1); }\n    if (state === 'ANSWERED') { return set(2); }\n    if (state === 'CHEAT') { return set(0); }\n  };\n\n  const hideGiveupButton = () => {\n    setLettersData(oldLettersData => ({\n      ...oldLettersData,\n      showGiveupButton: false,\n    }));\n  }\n  \n  return <div className=\"app\">\n    <Head>\n      <title>Vowels</title>\n      <link rel=\"icon\" href=\"/favicon.ico\" />\n    </Head>\n    <h1 style={{ zIndex: 50, position: \"absolute\", top: 10, left: 10, fontSize: '40px'}}> Move the Yellow Blocks to Form Words</h1>\n    <div className=\"colored-background\" style={{ position: 'absolute', top:'0', left:'0' }}>\n      {transitions.map(({ item, props, key }) => {\n        const Page = pages[item]\n        return <Page key={key} style={props} />\n      })}\n    </div>\n    <DraggableList {...{ order: lettersData.order, setOrder }} showAnswer={lettersData.showAnswer}\n      items={lettersData.letters} answer={lettersData.answer} answers={lettersData.answers} setBackgroundColor={setBackgroundColor}\n      onCorrect={onCorrect} loading={lettersData.loading} hideGiveupButton={hideGiveupButton}/>\n\n    <div className=\"bottom-buttons\">\n      <animated.button style={useSpring({ opacity: lettersData.showGiveupButton ? 1 : 0 })} className=\"answer-button\" onClick={_.throttle(() => {\n        if (!lettersData.showGiveupButton) { return; }\n        if (lettersData.showAnswer) { return; }\n        if (lettersData.order.map(o => o.letter).join('') === lettersData.answer) { return; }\n        setLettersData({\n          ...lettersData,\n          showAnswer: true,\n          order: getAnswerOrder(lettersData.order, lettersData.answer),\n          showGiveupButton: false,\n        });\n      }, 1000)}>GIVE UP</animated.button>\n    </div>\n    { globalStyle }\n  </div>\n};\n\nexport default Home\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AA4EA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAAA;AACA;AAWA;AAAA;AAEA;AAFA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAEA;AAFA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAXA;AACA;AAKA;AAAA;AAMA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAacA;AACA;AACA;;;;A","sourceRoot":""}